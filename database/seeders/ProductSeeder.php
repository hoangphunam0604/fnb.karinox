<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Branch;
use App\Models\Product;
use App\Models\Category;
use App\Models\ProductBranch;
use App\Models\ProductFormula;
use App\Services\ProductService;
use Illuminate\Support\Facades\DB;

class ProductSeeder extends Seeder
{
  protected ProductService $productService;

  public function __construct(ProductService $productService)
  {
    $this->productService = $productService;
  }

  /**
   * Run the database seeds.
   */
  public function run(): void
  {
    // X√≥a d·ªØ li·ªáu c≈© theo ƒë√∫ng th·ª© t·ª± foreign key
    ProductFormula::query()->delete();
    ProductBranch::query()->delete();
    Product::query()->delete();
    Category::query()->delete();

    echo "üè≠ T·∫°o h·ªá th·ªëng s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß cho F&B...\n";

    // B∆∞·ªõc 1: T·∫°o danh m·ª•c
    $categories = [
      // Nguy√™n li·ªáu
      [
        'name' => 'Nguy√™n li·ªáu c√† ph√™',
        'code_prefix' => 'CF_MAT',
        'description' => 'C√°c lo·∫°i h·∫°t c√† ph√™, b·ªôt c√† ph√™'
      ],
      [
        'name' => 'Nguy√™n li·ªáu tr√†',
        'code_prefix' => 'TEA_MAT',
        'description' => 'L√° tr√† c√°c lo·∫°i, b·ªôt matcha'
      ],
      [
        'name' => 'Nguy√™n li·ªáu b√°nh',
        'code_prefix' => 'CAKE_MAT',
        'description' => 'B·ªôt m√¨, ƒë∆∞·ªùng, tr·ª©ng, b∆°'
      ],
      [
        'name' => 'Nguy√™n li·ªáu kh√°c',
        'code_prefix' => 'OTHER_MAT',
        'description' => 'S·ªØa, kem, sir√¥, tr√°i c√¢y'
      ],
      // H√†ng h√≥a
      [
        'name' => 'H√†ng h√≥a ƒë√≥ng g√≥i',
        'code_prefix' => 'GOODS',
        'description' => 'S·∫£n ph·∫©m ƒë√≥ng g√≥i s·∫µn'
      ],
      // S·∫£n ph·∫©m ch·∫ø bi·∫øn
      [
        'name' => 'ƒê·ªì u·ªëng',
        'code_prefix' => 'DRINK',
        'description' => 'C√† ph√™, tr√†, n∆∞·ªõc √©p'
      ],
      [
        'name' => 'B√°nh ng·ªçt',
        'code_prefix' => 'CAKE',
        'description' => 'B√°nh t∆∞∆°i, b√°nh n∆∞·ªõng'
      ],
      [
        'name' => 'ƒê·ªì ƒÉn',
        'code_prefix' => 'FOOD',
        'description' => 'M√≥n ƒÉn ch·∫ø bi·∫øn'
      ],
      // Combo
      [
        'name' => 'Combo',
        'code_prefix' => 'COMBO',
        'description' => 'Combo s·∫£n ph·∫©m'
      ],
      // D·ªãch v·ª•
      [
        'name' => 'D·ªãch v·ª•',
        'code_prefix' => 'SRV',
        'description' => 'C√°c d·ªãch v·ª•'
      ]
    ];

    $createdCategories = [];
    foreach ($categories as $categoryData) {
      $category = Category::create($categoryData);
      $createdCategories[$category->code_prefix] = $category;
    }

    // B∆∞·ªõc 2: T·∫°o nguy√™n li·ªáu (ingredients)
    $ingredients = [
      // Nguy√™n li·ªáu c√† ph√™
      [
        'category' => 'CF_MAT',
        'code' => 'CF_MAT001',
        'name' => 'H·∫°t c√† ph√™ Arabica',
        'cost_price' => 500000, // 500k/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'CF_MAT',
        'code' => 'CF_MAT002',
        'name' => 'H·∫°t c√† ph√™ Robusta',
        'cost_price' => 400000, // 400k/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'CF_MAT',
        'code' => 'CF_MAT003',
        'name' => 'B·ªôt c√† ph√™ pha m√°y',
        'cost_price' => 600000, // 600k/kg
        'unit' => 'kg'
      ],
      // Nguy√™n li·ªáu tr√†
      [
        'category' => 'TEA_MAT',
        'code' => 'TEA_MAT001',
        'name' => 'L√° tr√† xanh',
        'cost_price' => 300000, // 300k/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'TEA_MAT',
        'code' => 'TEA_MAT002',
        'name' => 'B·ªôt matcha',
        'cost_price' => 1200000, // 1.2M/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'TEA_MAT',
        'code' => 'TEA_MAT003',
        'name' => 'L√° tr√† √¥ long',
        'cost_price' => 500000, // 500k/kg
        'unit' => 'kg'
      ],
      // Nguy√™n li·ªáu b√°nh
      [
        'category' => 'CAKE_MAT',
        'code' => 'CAKE_MAT001',
        'name' => 'B·ªôt m√¨ s·ªë 8',
        'cost_price' => 25000, // 25k/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'CAKE_MAT',
        'code' => 'CAKE_MAT002',
        'name' => 'ƒê∆∞·ªùng c√°t tr·∫Øng',
        'cost_price' => 22000, // 22k/kg
        'unit' => 'kg'
      ],
      [
        'category' => 'CAKE_MAT',
        'code' => 'CAKE_MAT003',
        'name' => 'B∆° l·∫°t',
        'cost_price' => 180000, // 180k/kg
        'unit' => 'kg'
      ],
      // Nguy√™n li·ªáu kh√°c
      [
        'category' => 'OTHER_MAT',
        'code' => 'OTHER_MAT001',
        'name' => 'S·ªØa t∆∞∆°i',
        'cost_price' => 25000, // 25k/l√≠t
        'unit' => 'l√≠t'
      ],
      [
        'category' => 'OTHER_MAT',
        'code' => 'OTHER_MAT002',
        'name' => 'Kem whipping',
        'cost_price' => 120000, // 120k/l√≠t
        'unit' => 'l√≠t'
      ],
      [
        'category' => 'OTHER_MAT',
        'code' => 'OTHER_MAT003',
        'name' => 'Sir√¥ vanilla',
        'cost_price' => 80000, // 80k/chai
        'unit' => 'chai'
      ]
    ];

    $createdIngredients = [];
    foreach ($ingredients as $ingredientData) {
      // T·∫°o d·ªØ li·ªáu cho ProductService
      $branches = Branch::all();
      $branchesData = [];
      foreach ($branches as $branch) {
        $branchesData[] = [
          'branch_id' => $branch->id,
          'is_selling' => false, // Nguy√™n li·ªáu kh√¥ng b√°n tr·ª±c ti·∫øp
          'stock_quantity' => rand(500, 2000) // Nguy√™n li·ªáu c·∫ßn nhi·ªÅu stock cho s·∫£n xu·∫•t
        ];
      }

      $productData = [
        'category_id' => $createdCategories[$ingredientData['category']]->id,
        'code' => $ingredientData['code'],
        'name' => $ingredientData['name'],
        'cost_price' => $ingredientData['cost_price'],
        'regular_price' => null,
        'unit' => $ingredientData['unit'],
        'product_type' => 'ingredient',
        'allows_sale' => false, // Nguy√™n li·ªáu kh√¥ng b√°n tr·ª±c ti·∫øp
        'manage_stock' => true,
        'status' => 'active',
        'branches' => $branchesData
      ];

      $ingredient = $this->productService->create($productData);
      $createdIngredients[$ingredient->code] = $ingredient;
    }

    // B∆∞·ªõc 3: T·∫°o h√†ng h√≥a (goods)
    $goods = [
      [
        'category' => 'GOODS',
        'code' => 'GOODS001',
        'name' => 'N∆∞·ªõc su·ªëi Aquafina',
        'cost_price' => 8000,
        'regular_price' => 15000,
        'description' => 'N∆∞·ªõc su·ªëi chai 500ml'
      ],
      [
        'category' => 'GOODS',
        'code' => 'GOODS002',
        'name' => 'B√°nh quy Oreo',
        'cost_price' => 25000,
        'regular_price' => 35000,
        'description' => 'B√°nh quy Oreo g√≥i'
      ],
      [
        'category' => 'GOODS',
        'code' => 'GOODS003',
        'name' => 'K·∫πo chewing gum',
        'cost_price' => 5000,
        'regular_price' => 10000,
        'description' => 'K·∫πo cao su'
      ]
    ];

    $createdGoods = [];
    foreach ($goods as $goodData) {
      $branches = Branch::all();
      $branchesData = [];
      foreach ($branches as $branch) {
        $branchesData[] = [
          'branch_id' => $branch->id,
          'is_selling' => true,
          'stock_quantity' => rand(50, 200) // H√†ng h√≥a c√≥ s·∫µn ƒë·ªÉ b√°n
        ];
      }

      $productData = [
        'category_id' => $createdCategories[$goodData['category']]->id,
        'code' => $goodData['code'],
        'name' => $goodData['name'],
        'description' => $goodData['description'],
        'cost_price' => $goodData['cost_price'],
        'regular_price' => $goodData['regular_price'],
        'product_type' => 'goods',
        'allows_sale' => true,
        'manage_stock' => true,
        'status' => 'active',
        'branches' => $branchesData
      ];

      $good = $this->productService->create($productData);
      $createdGoods[$good->code] = $good;
    }

    // B∆∞·ªõc 4: T·∫°o s·∫£n ph·∫©m ch·∫ø bi·∫øn (processed)
    $processedProducts = [
      // ƒê·ªì u·ªëng
      [
        'category' => 'DRINK',
        'code' => 'DRINK001',
        'name' => 'C√† ph√™ ƒëen',
        'regular_price' => 25000,
        'sale_price' => 22000,
        'description' => 'C√† ph√™ ƒëen truy·ªÅn th·ªëng',
        'formula' => [
          ['ingredient' => 'CF_MAT003', 'quantity' => 20], // 20g b·ªôt c√† ph√™
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 50] // 50ml s·ªØa (cho pha)
        ]
      ],
      [
        'category' => 'DRINK',
        'code' => 'DRINK002',
        'name' => 'Cappuccino',
        'regular_price' => 35000,
        'description' => 'Cappuccino √ù truy·ªÅn th·ªëng',
        'formula' => [
          ['ingredient' => 'CF_MAT003', 'quantity' => 18], // 18g b·ªôt c√† ph√™
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 150], // 150ml s·ªØa
          ['ingredient' => 'OTHER_MAT002', 'quantity' => 30] // 30ml kem
        ]
      ],
      [
        'category' => 'DRINK',
        'code' => 'DRINK003',
        'name' => 'Latte',
        'regular_price' => 38000,
        'sale_price' => 35000,
        'description' => 'Latte m·ªÅm m·∫°i, th∆°m ngon',
        'formula' => [
          ['ingredient' => 'CF_MAT003', 'quantity' => 16],
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 180],
          ['ingredient' => 'OTHER_MAT003', 'quantity' => 5]
        ]
      ],
      [
        'category' => 'DRINK',
        'code' => 'DRINK004',
        'name' => 'Tr√† xanh',
        'regular_price' => 25000,
        'description' => 'Tr√† xanh t∆∞∆°i m√°t',
        'formula' => [
          ['ingredient' => 'TEA_MAT001', 'quantity' => 3] // 3g l√° tr√†
        ]
      ],
      [
        'category' => 'DRINK',
        'code' => 'DRINK005',
        'name' => 'Tr√† s·ªØa matcha',
        'regular_price' => 40000,
        'sale_price' => 38000,
        'description' => 'Tr√† s·ªØa matcha Nh·∫≠t B·∫£n',
        'formula' => [
          ['ingredient' => 'TEA_MAT002', 'quantity' => 8], // 8g b·ªôt matcha
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 200], // 200ml s·ªØa
          ['ingredient' => 'OTHER_MAT003', 'quantity' => 10] // 10ml sir√¥
        ]
      ],
      [
        'category' => 'DRINK',
        'code' => 'DRINK006',
        'name' => 'Tr√† √¥ long',
        'regular_price' => 28000,
        'sale_price' => 25000,
        'description' => 'Tr√† √¥ long th∆°m n·ª©c',
        'formula' => [
          ['ingredient' => 'TEA_MAT003', 'quantity' => 4]
        ]
      ],
      // B√°nh ng·ªçt
      [
        'category' => 'CAKE',
        'code' => 'CAKE001',
        'name' => 'B√°nh muffin chocolate',
        'regular_price' => 25000,
        'sale_price' => 23000,
        'description' => 'B√°nh muffin chocolate chip',
        'formula' => [
          ['ingredient' => 'CAKE_MAT001', 'quantity' => 50], // 50g b·ªôt m√¨
          ['ingredient' => 'CAKE_MAT002', 'quantity' => 30], // 30g ƒë∆∞·ªùng
          ['ingredient' => 'CAKE_MAT003', 'quantity' => 20], // 20g b∆°
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 40] // 40ml s·ªØa
        ]
      ],
      [
        'category' => 'CAKE',
        'code' => 'CAKE002',
        'name' => 'Croissant',
        'regular_price' => 20000,
        'description' => 'B√°nh croissant Ph√°p',
        'formula' => [
          ['ingredient' => 'CAKE_MAT001', 'quantity' => 60], // 60g b·ªôt m√¨
          ['ingredient' => 'CAKE_MAT003', 'quantity' => 40] // 40g b∆°
        ]
      ],
      [
        'category' => 'CAKE',
        'code' => 'CAKE003',
        'name' => 'B√°nh tiramisu',
        'regular_price' => 45000,
        'sale_price' => 42000,
        'description' => 'B√°nh tiramisu √ù nguy√™n b·∫£n',
        'formula' => [
          ['ingredient' => 'CAKE_MAT001', 'quantity' => 40],
          ['ingredient' => 'CAKE_MAT002', 'quantity' => 25],
          ['ingredient' => 'CAKE_MAT003', 'quantity' => 30],
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 60],
          ['ingredient' => 'OTHER_MAT002', 'quantity' => 50]
        ]
      ],
      // ƒê·ªì ƒÉn
      [
        'category' => 'FOOD',
        'code' => 'FOOD001',
        'name' => 'Sandwich g√†',
        'regular_price' => 35000,
        'sale_price' => 32000,
        'description' => 'Sandwich th·ªãt g√† n∆∞·ªõng',
        'formula' => [
          ['ingredient' => 'CAKE_MAT001', 'quantity' => 80], // 80g b√°nh m√¨ (t·ª´ b·ªôt m√¨)
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 20] // 20ml s·ªØa (cho s·ªët)
        ]
      ],
      [
        'category' => 'FOOD',
        'code' => 'FOOD002',
        'name' => 'Salad tr·ªôn',
        'regular_price' => 30000,
        'description' => 'Salad rau c·ªß t∆∞∆°i ngon',
        'formula' => [
          ['ingredient' => 'OTHER_MAT001', 'quantity' => 30] // 30ml s·ªØa (cho dressing)
        ]
      ]
    ];

    $createdProcessed = [];
    foreach ($processedProducts as $productData) {
      // T√≠nh cost_price t·ª´ c√¥ng th·ª©c
      $costPrice = 0;
      $formulas = [];
      foreach ($productData['formula'] as $formulaItem) {
        $ingredient = $createdIngredients[$formulaItem['ingredient']];
        $costPrice += ($ingredient->cost_price * $formulaItem['quantity'] / 1000); // Quy ƒë·ªïi v·ªÅ gram/ml

        // Chu·∫©n b·ªã d·ªØ li·ªáu formulas cho ProductService
        $formulas[] = [
          'ingredient_id' => $ingredient->id,
          'quantity' => $formulaItem['quantity']
        ];
      }

      $branches = Branch::all();
      $branchesData = [];
      foreach ($branches as $branch) {
        $branchesData[] = [
          'branch_id' => $branch->id,
          'is_selling' => true,
          'stock_quantity' => 0 // H√†ng ch·∫ø bi·∫øn kh√¥ng l∆∞u kho
        ];
      }

      $productServiceData = [
        'category_id' => $createdCategories[$productData['category']]->id,
        'code' => $productData['code'],
        'name' => $productData['name'],
        'description' => $productData['description'],
        'cost_price' => round($costPrice),
        'regular_price' => $productData['regular_price'],
        'sale_price' => $productData['sale_price'] ?? null,
        'product_type' => 'processed',
        'allows_sale' => true,
        'print_label' => true,
        'status' => 'active',
        'branches' => $branchesData,
        'formulas' => $formulas
      ];

      $product = $this->productService->create($productServiceData);
      $createdProcessed[$product->code] = $product;
    }

    // B∆∞·ªõc 5: T·∫°o combo
    $combos = [
      [
        'category' => 'COMBO',
        'code' => 'COMBO001',
        'name' => 'Combo c√† ph√™ + b√°nh',
        'regular_price' => 45000,
        'sale_price' => 40000,
        'description' => 'Combo c√† ph√™ ƒëen + muffin chocolate',
        'items' => [
          ['product' => 'DRINK001', 'quantity' => 1],
          ['product' => 'CAKE001', 'quantity' => 1]
        ]
      ],
      [
        'category' => 'COMBO',
        'code' => 'COMBO002',
        'name' => 'Combo healthy',
        'regular_price' => 50000,
        'description' => 'Combo tr√† xanh + sandwich g√†',
        'items' => [
          ['product' => 'DRINK004', 'quantity' => 1],
          ['product' => 'FOOD001', 'quantity' => 1]
        ]
      ],
      [
        'category' => 'COMBO',
        'code' => 'COMBO003',
        'name' => 'Combo premium',
        'regular_price' => 70000,
        'sale_price' => 65000,
        'description' => 'Combo latte + tiramisu',
        'items' => [
          ['product' => 'DRINK003', 'quantity' => 1],
          ['product' => 'CAKE003', 'quantity' => 1]
        ]
      ]
    ];

    $createdCombos = [];
    foreach ($combos as $comboData) {
      // T√≠nh cost_price t·ª´ c√°c s·∫£n ph·∫©m con
      $costPrice = 0;
      $formulas = [];
      foreach ($comboData['items'] as $item) {
        $childProduct = $createdProcessed[$item['product']];
        $costPrice += $childProduct->cost_price * $item['quantity'];

        // Chu·∫©n b·ªã d·ªØ li·ªáu formulas cho combo
        $formulas[] = [
          'ingredient_id' => $childProduct->id, // ·ªû ƒë√¢y ingredient_id th·ª±c ch·∫•t l√† product con
          'quantity' => $item['quantity']
        ];
      }

      $branches = Branch::all();
      $branchesData = [];
      foreach ($branches as $branch) {
        $branchesData[] = [
          'branch_id' => $branch->id,
          'is_selling' => true,
          'stock_quantity' => 0 // Combo kh√¥ng l∆∞u kho
        ];
      }

      $comboServiceData = [
        'category_id' => $createdCategories[$comboData['category']]->id,
        'code' => $comboData['code'],
        'name' => $comboData['name'],
        'description' => $comboData['description'],
        'cost_price' => $costPrice,
        'regular_price' => $comboData['regular_price'],
        'sale_price' => $comboData['sale_price'] ?? null,
        'product_type' => 'combo',
        'allows_sale' => true,
        'print_label' => true,
        'status' => 'active',
        'branches' => $branchesData,
        'formulas' => $formulas
      ];

      $combo = $this->productService->create($comboServiceData);
      $createdCombos[$combo->code] = $combo;
    }

    // B∆∞·ªõc 6: T·∫°o d·ªãch v·ª• (services)
    $services = [
      [
        'category' => 'SRV',
        'code' => 'SRV001',
        'name' => 'D·ªãch v·ª• giao h√†ng',
        'regular_price' => 15000,
        'description' => 'Ph√≠ giao h√†ng t·∫≠n n∆°i'
      ],
      [
        'category' => 'SRV',
        'code' => 'SRV002',
        'name' => 'D·ªãch v·ª• ƒë√≥ng g√≥i ƒë·∫∑c bi·ªát',
        'regular_price' => 10000,
        'description' => 'ƒê√≥ng g√≥i qu√† t·∫∑ng'
      ],
      [
        'category' => 'SRV',
        'code' => 'SRV003',
        'name' => 'D·ªãch v·ª• ƒë·∫∑t b√†n VIP',
        'regular_price' => 50000,
        'description' => 'Ph√≠ ƒë·∫∑t b√†n VIP'
      ]
    ];

    $createdServices = [];
    foreach ($services as $serviceData) {
      $branches = Branch::all();
      $branchesData = [];
      foreach ($branches as $branch) {
        $branchesData[] = [
          'branch_id' => $branch->id,
          'is_selling' => true,
          'stock_quantity' => 0 // D·ªãch v·ª• kh√¥ng c√≥ t·ªìn kho
        ];
      }

      $serviceServiceData = [
        'category_id' => $createdCategories[$serviceData['category']]->id,
        'code' => $serviceData['code'],
        'name' => $serviceData['name'],
        'description' => $serviceData['description'],
        'cost_price' => 0, // D·ªãch v·ª• kh√¥ng c√≥ cost
        'regular_price' => $serviceData['regular_price'],
        'product_type' => 'service',
        'allows_sale' => true,
        'manage_stock' => false, // D·ªãch v·ª• kh√¥ng qu·∫£n l√Ω t·ªìn kho
        'status' => 'active',
        'branches' => $branchesData
      ];

      $service = $this->productService->create($serviceServiceData);
      $createdServices[$service->code] = $service;
    }

    echo "‚úÖ Product seeder completed successfully!\n";
    echo "üìä Created:\n";
    echo "   - Categories: " . count($createdCategories) . "\n";
    echo "   - Ingredients: " . count($createdIngredients) . "\n";
    echo "   - Goods: " . count($createdGoods) . "\n";
    echo "   - Processed Products: " . count($createdProcessed) . "\n";
    echo "   - Combos: " . count($createdCombos) . "\n";
    echo "   - Services: " . count($createdServices) . "\n";
    echo "   - Product Formulas: " . ProductFormula::count() . "\n";
    echo "   - Product Branches: " . ProductBranch::count() . "\n";
  }
}
