<?php

echo "üõí TEST B√ÅN H√ÄNG QUA API + KI·ªÇM TRA T·ªíN KHO\n";
echo "Domain: http://karinox-fnb.nam/\n";
echo "========================================\n\n";

class SalesInventoryTester 
{
    private $baseUrl;
    private $token;
    private $headers;
    private $branchId = 1;
    
    public function __construct() {
        $this->baseUrl = 'http://karinox-fnb.nam';
                $this->headers = [
            'Accept: application/json',
            'Content-Type: application/json',
            'X-Requested-With: XMLHttpRequest',
            'X-Branch-Id: 1',
            'karinox-app-id: karinox-app-admin'
        ];
    }
    
    public function login($username, $password) {
        echo "üîë ƒêƒÉng nh·∫≠p v·ªõi username: {$username}...\n";
        
        $loginData = ['username' => $username, 'password' => $password];
        $result = $this->makeRequest('POST', '/api/auth/login', $loginData);
        
        echo "Login response: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n";
        
        if ($result['http_code'] === 200 && isset($result['data']['access_token'])) {
            $this->token = $result['data']['access_token'];
            $this->headers[] = "Authorization: Bearer {$this->token}";
            echo "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!\n";
            echo "üéüÔ∏è  Token: " . substr($this->token, 0, 30) . "...\n\n";
            return true;
        } else {
            echo "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Status: {$result['http_code']}\n\n";
            return false;
        }
    }
    
    public function makeRequest($method, $endpoint, $data = null) {
        $url = $this->baseUrl . $endpoint;
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        
        if ($data && in_array($method, ['POST', 'PUT', 'PATCH'])) {
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        }
        
        $startTime = microtime(true);
        $response = curl_exec($ch);
        $endTime = microtime(true);
        $responseTime = round(($endTime - $startTime) * 1000, 2);
        
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        curl_close($ch);
        
        return [
            'http_code' => $httpCode,
            'data' => json_decode($response, true),
            'raw' => $response,
            'response_time' => $responseTime,
            'error' => $error
        ];
    }
    
    public function getStockReport() {
        echo "üìä L·∫•y b√°o c√°o t·ªìn kho hi·ªán t·∫°i...\n";
        
        $result = $this->makeRequest('GET', "/api/admin/inventory/stock-report?branch_id={$this->branchId}");
        echo "Status: {$result['http_code']} ({$result['response_time']}ms)\n";
        
        if ($result['http_code'] === 200 && isset($result['data']['data'])) {
            $stockData = $result['data']['data'];
            echo "‚úÖ L·∫•y d·ªØ li·ªáu t·ªìn kho th√†nh c√¥ng!\n";
            echo "üì¶ T·ªïng s·ªë s·∫£n ph·∫©m: " . count($stockData) . "\n\n";
            
            echo "üìã Chi ti·∫øt t·ªìn kho:\n";
            foreach (array_slice($stockData, 0, 10) as $item) {
                $lowStock = $item['is_low_stock'] ? ' ‚ö†Ô∏è' : '';
                $outStock = $item['is_out_of_stock'] ? ' ‚ùå' : '';
                echo "- {$item['product_code']}: {$item['product_name']} | T·ªìn: {$item['stock_quantity']}{$lowStock}{$outStock}\n";
            }
            if (count($stockData) > 10) {
                echo "... v√† " . (count($stockData) - 10) . " s·∫£n ph·∫©m kh√°c\n";
            }
            echo "\n";
            
            return $stockData;
        } else {
            echo "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ªìn kho\n";
            echo "Response: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n\n";
            return [];
        }
    }
    
    public function createTestOrder($products) {
        echo "üõí B∆Ø·ªöC 1: T·∫°o ƒë∆°n h√†ng test\n";
        echo "===========================\n";
        
        // T·∫°o customer test n·∫øu c·∫ßn
        $customerData = [
            'fullname' => 'Test Customer ' . date('H:i:s'),
            'phone' => '098' . rand(1000000, 9999999),
            'email' => 'test' . time() . '@karinox.vn',
            'gender' => 'male',
            'status' => 'active'
        ];
        
        echo "üë§ T·∫°o kh√°ch h√†ng test...\n";
        echo "Data: " . json_encode($customerData, JSON_UNESCAPED_UNICODE) . "\n";
        $customerResult = $this->makeRequest('POST', '/api/admin/customers', $customerData);
        
        echo "Response Status: {$customerResult['http_code']} ({$customerResult['response_time']}ms)\n";
        if ($customerResult['http_code'] !== 201) {
            echo "‚ùå Kh√¥ng th·ªÉ t·∫°o customer\n";
            echo "Error Response: " . json_encode($customerResult['data'], JSON_UNESCAPED_UNICODE) . "\n";
            return null;
        }
        
        $customerId = $customerResult['data']['data']['id'];
        echo "‚úÖ Customer ID: {$customerId}\n\n";
        
        // Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ test (top 3 c√≥ t·ªìn kho)
        $selectedProducts = array_slice($products, 0, 3);
        
        echo "üì¶ S·∫£n ph·∫©m s·∫Ω b√°n:\n";
        $totalAmount = 0;
        foreach ($selectedProducts as $product) {
            $quantity = 2; // B√°n 2 c√°i m·ªói s·∫£n ph·∫©m
            $subtotal = $product['price'] * $quantity;
            $totalAmount += $subtotal;
            
            echo "- {$product['product_code']}: {$product['product_name']}\n";
            echo "  S·ªë l∆∞·ª£ng: {$quantity} x " . number_format($product['price']) . "ƒë = " . number_format($subtotal) . "ƒë\n";
            echo "  T·ªìn tr∆∞·ªõc b√°n: {$product['stock_quantity']}\n\n";
        }
        
        echo "üí∞ T·ªïng ti·ªÅn d·ª± ki·∫øn: " . number_format($totalAmount) . "ƒë\n\n";
        
        // Simulate t·∫°o order (v√¨ c√≥ th·ªÉ ch∆∞a c√≥ API t·∫°o order)
        echo "üìù Simulate t·∫°o order (t∆∞∆°ng ƒë∆∞∆°ng POST /api/pos/orders):\n";
        $orderData = [
            'customer_id' => $customerId,
            'branch_id' => $this->branchId,
            'items' => []
        ];
        
        foreach ($selectedProducts as $product) {
            $orderData['items'][] = [
                'product_id' => $product['product_id'],
                'quantity' => 2,
                'unit_price' => $product['price']
            ];
        }
        
        echo "Order data: " . json_encode($orderData, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT) . "\n\n";
        
        return [
            'customer_id' => $customerId,
            'products' => $selectedProducts,
            'total_amount' => $totalAmount
        ];
    }
    
    public function simulateInventoryUpdate($orderData) {
        echo "üìä B∆Ø·ªöC 2: C·∫≠p nh·∫≠t t·ªìn kho sau b√°n\n";
        echo "===================================\n";
        
        foreach ($orderData['products'] as $product) {
            $quantitySold = 2;
            $productId = $product['product_id'];
            
            echo "üì¶ C·∫≠p nh·∫≠t t·ªìn kho cho {$product['product_code']}...\n";
            echo "   B√°n: {$quantitySold} s·∫£n ph·∫©m\n";
            echo "   T·ªìn tr∆∞·ªõc: {$product['stock_quantity']}\n";
            
            // Simulate inventory transaction (OUT)
            $transactionData = [
                'type' => 'out',
                'reference_type' => 'sale',
                'reference_id' => 'ORDER_TEST_' . time(),
                'note' => 'B√°n h√†ng test qua API',
                'items' => [
                    [
                        'product_id' => $productId,
                        'quantity' => $quantitySold,
                        'unit_cost' => $product['cost_price'] ?? $product['price'] * 0.6
                    ]
                ]
            ];
            
            echo "   Transaction data: " . json_encode($transactionData, JSON_UNESCAPED_UNICODE) . "\n";
            
            // POST inventory transaction
            $result = $this->makeRequest('POST', '/api/admin/inventory', $transactionData);
            echo "   Status: {$result['http_code']} ({$result['response_time']}ms)\n";
            
            if ($result['http_code'] === 201) {
                echo "   ‚úÖ C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng!\n";
            } else {
                echo "   ‚ùå L·ªói c·∫≠p nh·∫≠t: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n";
            }
            echo "\n";
        }
    }
    
    public function compareStockBefore($stockBefore, $orderData) {
        echo "üìà B∆Ø·ªöC 3: So s√°nh t·ªìn kho tr∆∞·ªõc/sau b√°n\n";
        echo "=======================================\n";
        
        $stockAfter = $this->getStockReport();
        
        if (empty($stockAfter)) {
            echo "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ªìn kho sau b√°n\n";
            return;
        }
        
        echo "üìä So s√°nh thay ƒë·ªïi t·ªìn kho:\n";
        
        foreach ($orderData['products'] as $product) {
            $productCode = $product['product_code'];
            $quantitySold = 2;
            
            // T√¨m t·ªìn kho tr∆∞·ªõc v√† sau
            $beforeStock = $product['stock_quantity'];
            $afterStock = null;
            
            foreach ($stockAfter as $afterItem) {
                if ($afterItem['product_code'] === $productCode) {
                    $afterStock = $afterItem['stock_quantity'];
                    break;
                }
            }
            
            echo "\nüè∑Ô∏è  {$productCode}: {$product['product_name']}\n";
            echo "   T·ªìn tr∆∞·ªõc b√°n: {$beforeStock}\n";
            echo "   S·ªë l∆∞·ª£ng b√°n: {$quantitySold}\n";
            echo "   T·ªìn sau b√°n: " . ($afterStock ?? 'N/A') . "\n";
            
            if ($afterStock !== null) {
                $actualChange = $beforeStock - $afterStock;
                $expectedChange = $quantitySold;
                
                if ($actualChange === $expectedChange) {
                    echo "   ‚úÖ Ch√≠nh x√°c! Gi·∫£m ƒë√∫ng {$actualChange}\n";
                } else {
                    echo "   ‚ùå Sai l·ªách! Mong ƒë·ª£i gi·∫£m {$expectedChange}, th·ª±c t·∫ø gi·∫£m {$actualChange}\n";
                }
                
                // C·∫£nh b√°o t·ªìn kho th·∫•p
                if ($afterStock <= 10) {
                    echo "   ‚ö†Ô∏è  C·∫¢NH B√ÅO: T·ªìn kho th·∫•p ({$afterStock} c√≤n l·∫°i)\n";
                }
            }
        }
        
        echo "\nüí∞ Th√¥ng tin t√†i ch√≠nh:\n";
        echo "   T·ªïng doanh thu: " . number_format($orderData['total_amount']) . "ƒë\n";
        echo "   S·ªë s·∫£n ph·∫©m b√°n: " . (count($orderData['products']) * 2) . " m√≥n\n";
        echo "   Gi√° trung b√¨nh: " . number_format($orderData['total_amount'] / (count($orderData['products']) * 2)) . "ƒë/m√≥n\n";
    }
}

try {
    $tester = new SalesInventoryTester();
    
    // Login
    if (!$tester->login('karinox_admin', 'karinox_admin')) {
        echo "‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p. D·ª´ng test.\n";
        exit;
    }
    
    // L·∫•y t·ªìn kho ban ƒë·∫ßu
    echo "üìä KI·ªÇM TRA T·ªíN KHO BAN ƒê·∫¶U\n";
    echo "============================\n";
    $stockBefore = $tester->getStockReport();
    
    if (empty($stockBefore)) {
        echo "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho ƒë·ªÉ test\n";
        exit;
    }
    
    // L·ªçc s·∫£n ph·∫©m c√≥ t·ªìn kho > 0
    $availableProducts = array_filter($stockBefore, function($item) {
        return $item['stock_quantity'] > 0;
    });
    
    if (empty($availableProducts)) {
        echo "‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c√≥ t·ªìn kho > 0\n";
        exit;
    }
    
    echo "üéØ C√≥ " . count($availableProducts) . " s·∫£n ph·∫©m c√≥ t·ªìn kho ƒë·ªÉ test\n\n";
    
    // T·∫°o ƒë∆°n h√†ng test
    $orderData = $tester->createTestOrder($availableProducts);
    
    if (!$orderData) {
        echo "‚ùå Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng test\n";
        exit;
    }
    
    // C·∫≠p nh·∫≠t t·ªìn kho (simulate b√°n h√†ng)
    $tester->simulateInventoryUpdate($orderData);
    
    // So s√°nh k·∫øt qu·∫£
    $tester->compareStockBefore($stockBefore, $orderData);
    
    echo "\nüéâ TEST B√ÅN H√ÄNG & T·ªíN KHO HO√ÄN TH√ÄNH!\n";
    echo "====================================\n";
    echo "‚úÖ Authentication working\n";
    echo "‚úÖ Stock report accessible\n";
    echo "‚úÖ Customer creation working\n";
    echo "‚úÖ Inventory transactions working\n";
    echo "‚úÖ Stock comparison functional\n";
    echo "‚úÖ Sales simulation successful\n\n";
    
    echo "üöÄ H·ªÜ TH·ªêNG B√ÅN H√ÄNG + QU·∫¢N L√ù T·ªíN KHO HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!\n";
    
} catch (Exception $e) {
    echo "‚ùå L·ªñI: " . $e->getMessage() . "\n";
    echo "üìç File: " . $e->getFile() . " (Line: " . $e->getLine() . ")\n";
}