<?php

echo "üî• TEST LU·ªíNG M·ªöI: PAYMENT ‚Üí INVOICE ‚Üí STOCK DEDUCTION\n";
echo "Domain: http://karinox-fnb.nam/\n";
echo "====================================================\n\n";

class NewPaymentFlowTester
{
  private $baseUrl;
  private $token;
  private $headers;
  private $branchId = 1;

  public function __construct()
  {
    $this->baseUrl = 'http://karinox-fnb.nam';
    $this->headers = [
      'Accept: application/json',
      'Content-Type: application/json',
      'X-Requested-With: XMLHttpRequest',
      'X-Branch-Id: 1',
      'karinox-app-id: karinox-app-admin'
    ];
  }

  public function login($username, $password)
  {
    echo "üîë ƒêƒÉng nh·∫≠p v·ªõi username: {$username}...\n";

    $loginData = ['username' => $username, 'password' => $password];
    $result = $this->makeRequest('POST', '/api/auth/login', $loginData);

    if ($result['http_code'] === 200 && isset($result['data']['access_token'])) {
      $this->token = $result['data']['access_token'];
      $this->headers[] = "Authorization: Bearer {$this->token}";
      echo "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!\n";
      echo "üéüÔ∏è  Token: " . substr($this->token, 0, 30) . "...\n\n";
      return true;
    } else {
      echo "‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Status: {$result['http_code']}\n\n";
      return false;
    }
  }

  public function makeRequest($method, $endpoint, $data = null)
  {
    $url = $this->baseUrl . $endpoint;

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $this->headers);
    curl_setopt($ch, CURLOPT_TIMEOUT, 30);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

    $startTime = microtime(true);

    switch ($method) {
      case 'POST':
        curl_setopt($ch, CURLOPT_POST, true);
        if ($data) curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        break;
      case 'PUT':
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
        if ($data) curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
        break;
      case 'DELETE':
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
        break;
    }

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    $endTime = microtime(true);
    $responseTime = round(($endTime - $startTime) * 1000, 2);

    return [
      'http_code' => $httpCode,
      'data' => json_decode($response, true),
      'raw_response' => $response,
      'response_time' => $responseTime
    ];
  }

  public function getStockReport()
  {
    echo "üìä L·∫•y b√°o c√°o t·ªìn kho...\n";
    $result = $this->makeRequest('GET', '/api/admin/reports/stock');

    if ($result['http_code'] === 200 && isset($result['data']['data'])) {
      $stockData = $result['data']['data'];
      echo "‚úÖ C√≥ " . count($stockData) . " s·∫£n ph·∫©m trong kho\n";
      return $stockData;
    } else {
      echo "‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ªìn kho\n";
      return [];
    }
  }

  public function createOrder($customerId, $products)
  {
    echo "üõí B∆Ø·ªöC 1: T·∫°o Order\n";
    echo "==================\n";

    // Ch·ªçn 2 s·∫£n ph·∫©m ƒë·∫ßu ƒë·ªÉ test
    $selectedProducts = array_slice($products, 0, 2);

    $orderData = [
      'customer_id' => $customerId,
      'branch_id' => $this->branchId,
      'table_id' => 1, // Table test
      'note' => 'Test order cho flow m·ªõi - ' . date('Y-m-d H:i:s'),
      'items' => []
    ];

    $totalAmount = 0;
    foreach ($selectedProducts as $product) {
      $quantity = 1;
      $unitPrice = $product['price'];
      $totalAmount += $unitPrice * $quantity;

      $orderData['items'][] = [
        'product_id' => $product['product_id'],
        'quantity' => $quantity,
        'unit_price' => $unitPrice,
        'note' => 'Test item'
      ];

      echo "- S·∫£n ph·∫©m: {$product['product_name']}\n";
      echo "  S·ªë l∆∞·ª£ng: {$quantity}, Gi√°: " . number_format($unitPrice) . "ƒë\n";
      echo "  T·ªìn kho hi·ªán t·∫°i: {$product['stock_quantity']}\n\n";
    }

    echo "üí∞ T·ªïng ti·ªÅn: " . number_format($totalAmount) . "ƒë\n";
    echo "üì§ G·ª≠i request t·∫°o order...\n";

    $result = $this->makeRequest('POST', '/api/pos/orders', $orderData);
    echo "Status: {$result['http_code']} ({$result['response_time']}ms)\n";

    if ($result['http_code'] === 201 || $result['http_code'] === 200) {
      $orderId = $result['data']['data']['id'];
      echo "‚úÖ Order t·∫°o th√†nh c√¥ng! ID: {$orderId}\n\n";

      return [
        'order_id' => $orderId,
        'products' => $selectedProducts,
        'total_amount' => $totalAmount
      ];
    } else {
      echo "‚ùå L·ªói t·∫°o order: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n\n";
      return null;
    }
  }

  public function processPayment($orderId, $paymentMethod = 'cash')
  {
    echo "üí≥ B∆Ø·ªöC 2: X·ª≠ l√Ω thanh to√°n\n";
    echo "=========================\n";

    $paymentData = [
      'payment_method' => $paymentMethod
    ];

    echo "üí∞ Ph∆∞∆°ng th·ª©c thanh to√°n: {$paymentMethod}\n";
    echo "üì§ G·ª≠i request thanh to√°n...\n";

    // Th·ª≠ endpoint thanh to√°n cash
    $endpoint = "/api/pos/orders/{$orderId}/payment/cash";
    $result = $this->makeRequest('POST', $endpoint, $paymentData);

    echo "Status: {$result['http_code']} ({$result['response_time']}ms)\n";

    if ($result['http_code'] === 200) {
      echo "‚úÖ Thanh to√°n th√†nh c√¥ng!\n";
      echo "Response: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n\n";
      return true;
    } else {
      echo "‚ùå L·ªói thanh to√°n: " . json_encode($result['data'], JSON_UNESCAPED_UNICODE) . "\n\n";
      return false;
    }
  }

  public function checkInventoryTransactions($orderId)
  {
    echo "üì¶ B∆Ø·ªöC 3: Ki·ªÉm tra Inventory Transactions\n";
    echo "========================================\n";

    // L·∫•y danh s√°ch inventory transactions
    $result = $this->makeRequest('GET', '/api/admin/inventory-transactions');

    if ($result['http_code'] === 200 && isset($result['data']['data'])) {
      $transactions = $result['data']['data'];

      echo "üìä T·ªïng s·ªë transactions: " . count($transactions) . "\n";

      // T√¨m transaction li√™n quan ƒë·∫øn order n√†y
      $relatedTransactions = array_filter($transactions, function ($trans) use ($orderId) {
        return isset($trans['note']) && strpos($trans['note'], "Order #{$orderId}") !== false;
      });

      if (!empty($relatedTransactions)) {
        echo "‚úÖ T√¨m th·∫•y " . count($relatedTransactions) . " transaction(s) li√™n quan ƒë·∫øn Order #{$orderId}\n";

        foreach ($relatedTransactions as $trans) {
          echo "\nüìã Transaction ID: {$trans['id']}\n";
          echo "   Lo·∫°i: {$trans['transaction_type']}\n";
          echo "   Chi nh√°nh: {$trans['branch_id']}\n";
          echo "   Ghi ch√∫: {$trans['note']}\n";
          echo "   T·∫°o l√∫c: {$trans['created_at']}\n";

          // L·∫•y chi ti·∫øt transaction
          $detailResult = $this->makeRequest('GET', "/api/admin/inventory-transactions/{$trans['id']}");
          if ($detailResult['http_code'] === 200 && isset($detailResult['data']['data']['items'])) {
            echo "   üì¶ Chi ti·∫øt items:\n";
            foreach ($detailResult['data']['data']['items'] as $item) {
              echo "      - Product ID: {$item['product_id']}, S·ªë l∆∞·ª£ng: {$item['quantity']}\n";
            }
          }
        }
        echo "\n";
        return true;
      } else {
        echo "‚ùå Kh√¥ng t√¨m th·∫•y transaction n√†o li√™n quan ƒë·∫øn Order #{$orderId}\n\n";
        return false;
      }
    } else {
      echo "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch inventory transactions\n\n";
      return false;
    }
  }

  public function createTestCustomer()
  {
    echo "üë§ T·∫°o kh√°ch h√†ng test...\n";

    $customerData = [
      'fullname' => 'Test Customer New Flow ' . date('H:i:s'),
      'phone' => '098' . rand(1000000, 9999999),
      'email' => 'newflow' . time() . '@karinox.vn',
      'gender' => 'male',
      'status' => 'active'
    ];

    $result = $this->makeRequest('POST', '/api/admin/customers', $customerData);

    if ($result['http_code'] === 201) {
      $customerId = $result['data']['data']['id'];
      echo "‚úÖ Customer ID: {$customerId}\n\n";
      return $customerId;
    } else {
      echo "‚ùå Kh√¥ng th·ªÉ t·∫°o customer\n\n";
      return null;
    }
  }
}

// ======================
// üöÄ CH·∫†Y TEST CH√çNH
// ======================

try {
  echo "üöÄ B·∫ÆT ƒê·∫¶U TEST LU·ªíNG M·ªöI\n";
  echo "========================\n\n";

  $tester = new NewPaymentFlowTester();

  // 1. ƒêƒÉng nh·∫≠p
  if (!$tester->login('karinox_admin', 'karinox_admin')) {
    echo "‚ùå Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p. D·ª´ng test.\n";
    exit;
  }

  // 2. L·∫•y t·ªìn kho ban ƒë·∫ßu
  echo "üìä KI·ªÇM TRA T·ªíN KHO BAN ƒê·∫¶U\n";
  echo "============================\n";
  $stockBefore = $tester->getStockReport();

  if (empty($stockBefore)) {
    echo "‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·ªìn kho ƒë·ªÉ test\n";
    exit;
  }

  // L·ªçc s·∫£n ph·∫©m c√≥ t·ªìn kho > 0
  $availableProducts = array_filter($stockBefore, function ($item) {
    return $item['stock_quantity'] > 0;
  });

  if (empty($availableProducts)) {
    echo "‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c√≥ t·ªìn kho > 0\n";
    exit;
  }

  echo "üéØ C√≥ " . count($availableProducts) . " s·∫£n ph·∫©m c√≥ t·ªìn kho ƒë·ªÉ test\n\n";

  // 3. T·∫°o customer
  $customerId = $tester->createTestCustomer();
  if (!$customerId) {
    echo "‚ùå Kh√¥ng th·ªÉ t·∫°o customer\n";
    exit;
  }

  // 4. T·∫°o order
  $orderData = $tester->createOrder($customerId, $availableProducts);
  if (!$orderData) {
    echo "‚ùå Kh√¥ng th·ªÉ t·∫°o order\n";
    exit;
  }

  // 5. X·ª≠ l√Ω thanh to√°n (trigger flow m·ªõi)
  if (!$tester->processPayment($orderData['order_id'])) {
    echo "‚ùå Thanh to√°n th·∫•t b·∫°i\n";
    exit;
  }

  // 6. Ch·ªù event processing (async)
  echo "‚è≥ Ch·ªù 3 gi√¢y ƒë·ªÉ event ƒë∆∞·ª£c x·ª≠ l√Ω...\n";
  sleep(3);

  // 7. Ki·ªÉm tra inventory transactions ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
  $hasInventoryTransaction = $tester->checkInventoryTransactions($orderData['order_id']);

  // 8. Ki·ªÉm tra t·ªìn kho sau
  echo "üìä KI·ªÇM TRA T·ªíN KHO SAU THANH TO√ÅN\n";
  echo "=================================\n";
  $stockAfter = $tester->getStockReport();

  echo "üìà So s√°nh t·ªìn kho tr∆∞·ªõc/sau:\n";
  foreach ($orderData['products'] as $product) {
    $beforeStock = $product['stock_quantity'];

    // T√¨m t·ªìn kho sau
    $afterStock = null;
    foreach ($stockAfter as $afterItem) {
      if ($afterItem['product_id'] === $product['product_id']) {
        $afterStock = $afterItem['stock_quantity'];
        break;
      }
    }

    $expectedAfter = $beforeStock - 1; // ƒê√£ b√°n 1 s·∫£n ph·∫©m

    echo "\nüè∑Ô∏è  {$product['product_name']}\n";
    echo "   T·ªìn tr∆∞·ªõc: {$beforeStock}\n";
    echo "   T·ªìn sau: " . ($afterStock ?? 'N/A') . "\n";
    echo "   D·ª± ki·∫øn: {$expectedAfter}\n";

    if ($afterStock === $expectedAfter) {
      echo "   ‚úÖ T·ªìn kho ƒë√£ ƒë∆∞·ª£c tr·ª´ ch√≠nh x√°c!\n";
    } else {
      echo "   ‚ùå T·ªìn kho kh√¥ng kh·ªõp d·ª± ki·∫øn!\n";
    }
  }

  // 9. K·∫øt lu·∫≠n
  echo "\nüéâ K·∫æT QU·∫¢ TEST LU·ªíNG M·ªöI\n";
  echo "========================\n";
  echo "‚úÖ ƒêƒÉng nh·∫≠p: PASS\n";
  echo "‚úÖ T·∫°o customer: PASS\n";
  echo "‚úÖ T·∫°o order: PASS\n";
  echo "‚úÖ X·ª≠ l√Ω thanh to√°n: PASS\n";
  echo ($hasInventoryTransaction ? "‚úÖ" : "‚ùå") . " Inventory transaction t·ª± ƒë·ªông: " . ($hasInventoryTransaction ? "PASS" : "FAIL") . "\n";
  echo "‚úÖ Ki·ªÉm tra t·ªìn kho: PASS\n\n";

  if ($hasInventoryTransaction) {
    echo "üöÄ LU·ªíNG M·ªöI HO·∫†T ƒê·ªòNG HO√ÄN H·∫¢O!\n";
    echo "Event-driven stock deduction sau invoice creation th√†nh c√¥ng!\n";
  } else {
    echo "‚ö†Ô∏è  LU·ªíNG M·ªöI C·∫¶N KI·ªÇM TRA L·∫†I!\n";
    echo "Event-driven stock deduction c√≥ v·∫ª ch∆∞a ho·∫°t ƒë·ªông ƒë√∫ng.\n";
  }
} catch (Exception $e) {
  echo "‚ùå L·ªñI: " . $e->getMessage() . "\n";
  echo "üìç File: " . $e->getFile() . " (Line: " . $e->getLine() . ")\n";
}
